import sys

import pygame

# Import the settings
from Settings import Settings

# Import the ship
from Ship import Ship
from bullet import Bullet

from alien import Alien

# The following is the class for managing the overall game.
class AlienInvasion:
    # The following initializes the game and creates the game resources.
    def __init__(self):
        pygame.init()
        self.settings = Settings()

        # The following methods set the game to full screen. A seperate line of code setting the game to a specified
        # screen size that is less than full screen has been commented out lower down. I did not delete it
        # because I wanted to maintain the option of quickly switching between full screen and non-full
        # screen modes.
        self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
        self.settings.screen_width = self.screen.get_rect().width
        self.settings.screen_height = self.screen.get_rect().height

        # Where does this .set_mode come from? Does it come from pygame? I don't think I initialized it anywhere.
        # Yep, it looks like I haven't initialized it anywhere, so my best guess is that it probably comes from pygame.
        # self.screen = pygame.display.set_mode((1200, 800))
        pygame.display.set_caption("Alien Invasion")

        self.ship = Ship(self)
        self.bullets = pygame.sprite.Group()
        self.aliens = pygame.sprite.Group()

        self._create_fleet()

    def run_game(self):
        # This is the main loop for the game!
        while True:
            self._check_events()
            self.ship.update()
            self._update_screen()
            self._update_bullets()



    # Here is one of the helper functions to be included in the run_game function. The leading underscore identifies
    # this as a helper method.
    def _check_events(self):
        # In the book it says to 'watch for keyboard and mouse events', I'm not quite sure what that means.
        # Maybe it tracks the actions that the user takes and retrieves these events with the get method?
        # I think that may be what it is, that's what it looks like.
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                self._check_keydown_events(event)
            elif event.type == pygame.KEYUP:
                self._check_keyup_events(event)

    def _check_keydown_events(self, event):
        if event.key == pygame.K_RIGHT:
            # Move the ship to the right.
            self.ship.moving_right = True
        elif event.key == pygame.K_LEFT:
            # Move the ship to the left.
            self.ship.moving_left = True
        elif event.key == pygame.K_q:
            # Press q to quit the game.
            sys.exit()
        elif event.key == pygame.K_SPACE:
            self._fire_bullet()

    def _check_keyup_events(self, event):
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = False
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = False

    def _update_bullets(self):
        self.bullets.update()

        # Dispensing with used bullets.
        for bullet in self.bullets.copy():
            if bullet.rect.bottom <= 0:
                self.bullets.remove(bullet)
        print(len(self.bullets))


    # Here is another helper function to be included in the run_game function. In Python leading underscores
    # indicate helper methods apparently.
    def _update_screen(self):
        # Redraw the screen during each pass through the loop
        # This is also where we see the settings background color from the settings class used.
        self.screen.fill(self.settings.bg_color)
        self.ship.blitme()
        for bullet in self.bullets.sprites():
            bullet.draw_bullet()
        self.aliens.draw(self.screen)



        # Make the most recently 'drawn' screen visible.
        pygame.display.flip()

    def _fire_bullet(self):
        if len(self.bullets) <= self.settings.bullets_allowed:
            new_bullet = Bullet(self)
            self.bullets.add(new_bullet)

    def _create_fleet(self):
        '''Creating the fleet of aliens.'''
        # Making the first alien.
        alien = Alien(self)
        alien_width = alien.rect.width
        available_space_x = self.settings.screen_width - (2 * alien_width)
        number_aliens_x = available_space_x // (2 * alien_width)

        # Creating the first row of aliens.
        for alien_number in range(number_aliens_x):
            alien = Alien(self)
            alien.x = alien_width + 2 * alien_width * alien_number
            alien.rect.x = alien.x
            self.aliens.add(alien)

if __name__ == '__main__':
    # Make a game instance and then run the game.
    ai = AlienInvasion()
    ai.run_game()
